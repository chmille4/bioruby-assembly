require 'helper'

class TestBioAssemblyAce < Test::Unit::TestCase

     def setup
       ace_filename = File.join('data', 'example1.ace')
       @obj = Bio::Assembly.open(ace_filename, :ace)

       # pick a contig to do in depth tests on
       @contig = nil
       @tot_contig = []
       @obj.each_contig do |c| 
         @contig = c if c.name.to_i == 5 
         @tot_contig << c
       end   

       # pick a read to do in depth tests on
       @read = nil
       @contig.each_read{ |r| @read = r if r.name == '235283518' }
     end

     def test_num_contigs_parsed
       contigs_parsed = 13
       assert_equal(contigs_parsed, @tot_contig.size)
     end

     def test_num_reads_parsed
       reads_parsed_known = 1760
       reads_parsed = 0
       @tot_contig.each { |c| reads_parsed += c.reads.size }
       assert_equal(reads_parsed_known, reads_parsed)
     end

     def test_contig_num_reads
       num_reads = 15
       assert_equal(num_reads, @contig.reads.size )
     end

     def test_contig_seq
       seq = "TTTCCGTCAGATGTAAAGGTTGCAGAACCGGACCATTCTTGCGTCTGATCTTTCAGGATCGGATCGTTGGCGTCGAACTTATCGCTGTCTTTAAAGACACGGCCCGCGTTTTTCCAGCTGTCGATTGAGTTGTCGCCGACCTTTTGATAAAACATGTAGATTGATGTGTCATCAGCGTCTTTCGGGCTTCCCGCAAGAGCAAACACAACGTGATAGCCGTTGTATTCAGCTACTGTTCCGTCAGCGTTTTGCAGCGGCCAGCTGTCCCACACATCAAGTCCTTTTGCAGACTCAATATTTTTAATCGTTGATTGATCGAATTGAGGCACTTGGTATTTTTCGTTTTGCTGCTGTTTAGGGATCTGCAGCATATCATGGCGTGTAATATGAGAGACGCCGTACGTTTCTTTGTATGCTTTTTGGTTATTTTCTTTCGCGAAGGCTTGAGTCGCTCCTCCTGCCAGAAGTGCAGTCGTAAAAGTCAGAACTGTGGCTTGTTTTACAATTTTTTTGATGTTCATGTTCATGTCTCCTTCTGTATGTACTGTTTTTTGCGATCTGCCGTTTCGATCCTCCCGAATTGACTAGTGGGTAGGCCTGGCGGCCGCCTGGCCGTCGACATTTAGGTGACACTATAGAAGGATCCGCGGAATTCCTTTTTAGATTGAGATAATGACTTTGTTTGGAAGGATGTA*TTTTCATTTAATTAAAGCAAATTCGTAATAAT*AAAGTTAAACAATTTAATTTCAAGATGATTCACAGGTTTGTTGCCTCAAAAGAAAACTTATATTAATGGCAAGTTGTGAATAATTTATGCAACTCTTGTGGACAAGTTGACTCAACTTTTCAC*TTTATGTTATATTGTAAGGATGTGACTTTGTTTTGGAAAATTATATTTAATTTGATAATTAACCAATATAAAAAAGATAAACCAAAAGCTATAAGTCGTAAATAAGGACATTGGAAACAAGAAATATTCTCTCCTGAACATTATTTTAAATTATGCGCAATATGCAAATTTATAAGTGTTAAGTTAAAAAGATTGTTAATGGTTCTGTTTATTACCCAAAGACTTTTTTAAAGTTTAAGTCGTTGCTAAGAGTGCAGCGTTTAGACAAATAAAAATGCAATAATCTTCTCGCTCGGGAGCTATGTCCCTCGCATAATATTCTTCAAAGTGTACAGTAAATATTCTAGAAAAGTGAAGTGTGAAAAAGATATATTGCTTGTTTTTATATTTTGTTAATACAACAAAACTTCAAAAACCTGCGGTGGGGGGGGGGGGATAGTCACTTCCGTCACCTTCACCCCTCTCGTTCACTATACTCCCTCGCCCTGGCGTAATGATGGGGGGATTGGGGGTAGTTGCCCCTTAATAAAGTTCAAACTTGATTTATTTCTAACTCGATACCAGTGATTTACAAATGTTTCTGAAATGGCATGGTTTTCCCTAATAAATGCCTAAAAACCCTGAGCTGAGCCCACGCCAATT"
       assert_equal(seq, @contig.seq.to_s.upcase)
       assert_instance_of(Bio::Sequence::NA,@contig.seq)
     end

     def test_read_seq
       read_seq = 'GAAAAAAAAAGGCAGAAGTTTAATCAAAACGGATTTTTCCGTCAGATGTAAAGGTTGCAGAACCGGACCATTCTTGCGTCTGATCTTTCAGGATCGGATCGTTGGCGTCGAACTTATCGCTGTCTTTAAAGACACGGCCCGCGTTTTTCCAGCTGTCGATTGAGTTGTCGCCGACCTTTTGATAAAACATGTAGATTGATGTGTCATCAGCGTCTTTCGGGCTTCCCGCAAGAGCAAACACAACGTGATAGCCGTTGTATTCAGCTACTGTTCCGTCAGCGTTTTGCAGCGGCCAGCTGTCCCACACATCAAGTCCTTTTGCAGACTCAATATTTTTAATCGTTGATTGATCGAATTGAGGCACTTGGTATTTTTCGTTTTGCTGCTGTTTAGGGATCTGCAGCATATCATGGCGTGTAATATGAGAGACGCCGTACGTTTCTTTGTATGCTTTTTGGTTATTTTCTTTCGCGAAGGCTTGAGTCGCTCCTCCTGCCAGAAGTGCAGTCGTAAAAGTCAGAACTGTGGCTTGTTTTACAATTTTTTTGATGTTCATGTTCATGTCTCCTTCTGTATGTACTGTTTTTTGCGATCTGCCGTTTCGATCCTCCCGAATTGACTAGTGGGTAGGCCTGGCGGCCGCCTGGCCGTCGACATTTAGGTGACACTATAGAAGGATCCGCGGAATTCCTTTTTAGATTGAGATAATGACTTTGTTTGGAAGGATGTATTTTTCATTTAATTAAAGCAAATTCGTAATAAT*AAAGTTAAACAATTT*ATTTC*AGATGATTCACAGGTTTGTTGCCTCAAAAG*AAACTTATATTAATGGCAAGTTGTGAATAATTTATGCAACTCTTGTGGGACAAGTTGACTTCACCT'
       assert_equal(read_seq, @read.seq.to_s.upcase)
       assert_instance_of(Bio::Sequence::NA,@read.seq)
     end

     def test_read_range
       from = -34
       to = 849
       assert_equal(to, @read.to)      
       assert_equal(from, @read.from)
     end

     def test_read_clear_range
       clear_range_from = 36
       clear_range_to = 862
       assert_equal(clear_range_from, @read.clear_range_from)
       assert_equal(clear_range_to, @read.clear_range_to)      
     end

     def test_read_orientation
       orientation = 'U'
       assert_equal(orientation, @read.orientation)
     end
     
     def test_find_reads_in_range
        known_reads = [ '235283518', '235288260', '235293813', '235288255', '235283548' ]
        reads_in_range = @contig.find_reads_in_range(295, 424)
        assert_equal( 5, known_reads.size )
        known_reads.each do |read_name|
          read = Bio::Assembly::Read.new()
          read.name = read_name
          reads_in_range.delete(read)
        end
        assert_equal(0, reads_in_range.size)
      end

end


